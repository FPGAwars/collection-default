// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bit');
gettext('Logic');
gettext('Setup');
gettext('0');
gettext('Constant bit 0');
gettext('1');
gettext('Constant bit 1');
gettext('Combinational');
gettext('Gate');
gettext('Sequential');
gettext('Mux 2-1');
gettext('2-to-1 Multplexer (1-bit channels). Verilog implementation');
gettext('AND');
gettext('Two bits input And gate');
gettext('NAND');
gettext('Nand-x02: two input NAND gate. Verilog implementation');
gettext('NOR');
gettext('Nor-x02-verilog: 2 input NOR gate. Verilog implementation');
gettext('NOT');
gettext('NOT gate (Verilog implementation)');
gettext('Input');
gettext('Output');
gettext('OR');
gettext('OR2: Two bits input OR gate');
gettext('XNOR');
gettext('XOR');
gettext('XOR gate: 2-bits input xor gate. Verilog implementation');
gettext('Debouncer');
gettext('Remove the rebound on a mechanical switch');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input. Block implementation');
gettext('XOR gate: two bits input xor gate');
gettext('System - D Flip-flop. Capture data every system clock cycle. Verilog implementation');
gettext('DFF. D Flip-flop. Verilog implementation');
gettext('16-bits Syscounter with reset');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('16-Sys-reg-rst: 16 bits system register with reset. Verilog implementation');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('Input signal');
gettext('System clock');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Not connected');
gettext('Flip-flop-D');
gettext('Flip-flop-T');
gettext('Sys-TFF: System TFF: It toogles its output on every system cycle. Verilog implementation');
gettext('Prescaler22');
gettext('22-bits prescaler');
gettext('Parametric N-bits prescaler');
gettext('PrescalerN');
gettext('Pull-up-ecp5');
gettext('ECP5 FPGA internal pull-up configuration on the connected input port');
gettext('Pull-up-ice40');
gettext('Pull-up_ICE40:: FPGA internal pull-up configuration on the input port. ICE40 FPGA family');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('Tri-state');
gettext('InOut:  Input-Output block');
gettext('1. Basic');
gettext('2. Flip-flops');
gettext('3. Gates');
gettext('4. Muxes');
gettext('5. Markdown');
gettext('6. Verilog');
gettext('01. One LED');
gettext('Turn on a LED');
gettext('02. Two LEDs');
gettext('Turn on two LEDs');
gettext('03. Three LEDs');
gettext('Turn on three LEDs');
gettext('04. One LED blink');
gettext('Blinking LED');
gettext('05. Two LEDs alternate blink');
gettext('LEDs 0 and 7 are blinking alternatively');
gettext('06. Pushbutton and LED');
gettext('One pushbutton for turning the LED on and off');
gettext('01. DFF manual load');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input. Block implementation');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Sync-x01: 1-bit input with the system clock domain (Verilog implementation)');
gettext('The LED is turned on when the pushbutton is pressed');
gettext('special debouncer  \nfor buttons');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('02. Chain of three DFFs');
gettext('A chain of three D flip-flops  \nThe LEDs are turned on secuentially, with every click on the button');
gettext('03. Ring of four DFFs');
gettext('Simplified-Heart-tic-ms-sys-32bits: Nominal periodic signal in mili seconds');
gettext('Unit-ms-32bits: ms to cycles converter');
gettext('Heart-sys-zero-32bits: Generate a periodic signal of period T cycles. It starts at cycle 0. It never stops');
gettext('Sys-Delay-xN-32bits: The input tic is delayed N cycles');
gettext('Counter-M-x32: 32-bits M module counter with reset');
gettext('Inc1-32bit: Increment a 32-bits number by one');
gettext('AdderK-32bit: Adder of 32-bit operand and 32-bit constant');
gettext('Generic: 32-bits generic constant');
gettext('Adder-32bits: Adder of two operands of 32 bits');
gettext('Bus24-Join-8-16: Join the two buses into an 24-bits Bus');
gettext('Bus32-Split-8-24: Split the 28-bits bus into two buses of 8 and 24 wires');
gettext('Bus24-Split-16-8: Split the 24-bits bus into two buses of 16 and 8 wires');
gettext('Bus32-Join-8-24: Join the two buses into an 32-bits Bus');
gettext('Geu-32-Bits_v: 32-bit Unsigned Greather than or equal comparator. Verilog implementation');
gettext('32-Reg-rst: 32 bits Register with reset. Verilog implementation');
gettext('RS-FF-set-verilog. RS Flip-flop with priority set. Implementation in verilog');
gettext('start: Start signal: It goes from 1 to 0 when the system clock starts. 1 cycle pulse witch. Block implementation');
gettext('A ring of four D flip-flops\nThe sequence is shown in the LEDs');
gettext('Input parameter: Milieconds  ');
gettext('Input parameter:  \nSystem Frequency');
gettext('Delay');
gettext('Start a new period');
gettext('Start at cycle 0!');
gettext('Repeat!');
gettext('Current period ended  \nStart a new one');
gettext('Periodo (in system clock cycles)');
gettext('Current cycle in the period  \n(0-T-1)');
gettext('Cycles to delay');
gettext('Delay finished!');
gettext('Machine state: ON/OFF');
gettext('RS Flip-Flop');
gettext('Circuit state:  \n* ON: working (1)\n* OFF: Not working (0)');
gettext('The counter has reached  \nthe number of cycles  \nto delay');
gettext('Maximum count  \nreached');
gettext('32-bits register');
gettext('If the max count is reached  \nand the cnt tic is received,  \nthe register is reset to 0');
gettext('External reset');
gettext('Initial value: 1');
gettext('Initial value: 0');
gettext('Falling edge');
gettext('04. Toggle button');
gettext('TFF-verilog. System TFF with toggle input: It toogles on every system cycle if the input is active. Verilog implementation');
gettext('When the pushbutton is clicked the LED changes');
gettext('05. Binary counter with three TFFs');
gettext('Falling-edge detector. It generates a 1-period pulse (tic) when a falling edge is detected on the input');
gettext('A 3-bit binary counter with T flip-flops');
gettext('## Falling edge detector\n\nIt generates a 1-period pulse (tic) when a falling edge is detected on the  \ninput signal');
gettext('If the current signal is 0 and its value in  \nthe previous clock cycle was 1, it means  \nthat a falling edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a falling edge  \nand its detection');
gettext('01. AND gate');
gettext('Testing the AND gate');
gettext('02. OR gate');
gettext('Testing the OR gate');
gettext('03. AND truth table');
gettext('Truth table of the AND gate');
gettext('04. OR truth table');
gettext('Truth table of the OR gate');
gettext('05. Multiplexer 2-1');
gettext('NOT logic gate');
gettext('AND logic gate');
gettext('OR logic gate');
gettext('Simplified-Heart-ms-sys-32bits: Nominal periodic signal in mili seconds');
gettext('SR1-32bits: Shift  a 32-bit value one bit right. MSB is filled with the input  in');
gettext('Bus32-Split-31-1: Split the 32-bits bus into two buses of 31 and 1 wires');
gettext('Bus32-Join-1-31: Join the two buses into an 32-bits Bus');
gettext('Mux 2:1 implemented with logic gates  \nThe LED0 blinks or is turned on depending on the pushbutton 1');
gettext('Mux 2:1 with logic gates');
gettext('Signal for blinking the LED');
gettext('Fixed signal for turning on the LED');
gettext('Dividir entre dos el periodo  \n(Multiplicar por 2 la frecuencia)  ');
gettext('06. Decoder 2-4');
gettext('2 to 4 bits decoder with logic gates');
gettext('07. One bit adder');
gettext('1-bit adder');
gettext('01. Blinking fixed LED');
gettext('Blinking/fixed LED  \nThe toggle button selects if the LED blinks or stays turned on');
gettext('02. LED three states');
gettext('The LED has three modes of operation: blinking, turned on an turned off  \nSW2 pushbutton determines if the LED blinks/stays fixed  \nSW1 pushbutton determines the LED state (on or off), in fixed mode  ');
gettext('03. Multiplexer 4-1');
gettext('A 4:1 mux from two 2:1 muxes  \nThe LED can be in four states: off, blinking, on, blinking fast');
gettext('04. Shift register');
gettext('4 bits shift register. It is loaded with the initial value 1000 and then\nshifted on every clock pulse');
gettext('Binary value to load and shift');
gettext('Initializer. It has the initial value 0, so that the\ni0 is selected in all the muxes. The register is loaded.\nIn the next cycle, it has the value 1, so the i1 input\nis selected in all the muxes. The register is shifted.\nIn the next cycles it will remain in the shift state');
gettext('01. Headers list fonts');
gettext('# Markdown example\n\nThis is an example of an information block written in markdown  \nJust doble-click on this note to edit it  \n\n## Font styles\n\nIn markdown you can write in **bold** or *italic* font very easily  \n\n## List\n\nExample of lists\n\n### unordered\n\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n\n\n### ordered\n\n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n   2. Item 3c\n');
gettext('02. Links and images');
gettext('### Link example\n\nYou can find **more information** about Markdown in this page: [Mastering markdown](https://guides.github.com/features/mastering-markdown/)');
gettext('### Images :smiley:\n\nIt is also possible to include images, but they are only rendered if there is internet connection\n');
gettext('**PNG image**');
gettext('![](https://github.com/FPGAwars/icestudio-block-icons/raw/master/Logos/png/icestudio-logo.png)');
gettext('![](https://github.com/FPGAwars/icestudio-block-icons/raw/master/Logos/icestudio-logo.svg?sanitize=true)\n');
gettext('**SVG image**');
gettext('![](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-24/ejemplos-digitos-10.gif)');
gettext('**Animated GIF**');
gettext('03. Tables');
gettext('Puerta AND');
gettext('First Header | Second Header\n------------ | -------------\nContent from cell 1 | Content from cell 2\nContent in the first column | Content in the second column');
gettext('## Tables\n\nTables are really helpfull');
gettext('a | b | AND\n--|---|------\n0 | 0 | 0 \n0 | 1 | 0\n1 | 0 | 0\n1 | 1 | 1\n');
gettext('**AND truth table**');
gettext('**a**  \n  \n**b**');
gettext('**Output**');
gettext('04. Code task list');
gettext('## Code\n\n');
gettext('```verilog\nreg [7:0] value;\n\nalways @(posedge clk)\n  value <= value + 1;\n```');
gettext('```javascript\nfunction fancyAlert(arg) {\n  if(arg) {\n    $.facebox({div:'#foo'})\n  }\n}\n```');
gettext('- [x] Task 1\n- [x] Task 2\n- [x] Task 3\n- [ ] this is an incomplete item\n');
gettext('**Verilog**');
gettext('**Javascript**');
gettext('## Task lists\n\n');
gettext('05. Youtube videos');
gettext('# Youtube Videos');
gettext('It is possible to link to youtube videos just by adding a  \n**standard link** to it:  [https://www.youtube.com/watch?v=boXZusFCCIU](Video)');
gettext('or you can include the **video thumbnail** along with the **link** for playing it in  \nthe browser\n\n[![Click to see the youtube video](http://img.youtube.com/vi/boXZusFCCIU/0.jpg)](https://www.youtube.com/watch?v=boXZusFCCIU)');
gettext('01. Four bits fixed binary value');
gettext('Displaying a 4-bits fixed value in the LEDs');
gettext('02. Four bits fixed hexadecimal value');
gettext('Displaying a 4-bits fixed value (in hexadecimal) in the LEDs');
gettext('03. Eight bits fixed value buses');
gettext('Using buses for displaying a fixed value in the LEDs');
gettext('04. Eight bits counter');
gettext('An 8-bit binary counter');
gettext('05. Split buses');
gettext('An 8-bit binary counter, using an 8-bit bus splitted  \ninto two 4-bit buses');
gettext('06. ROM 16x8');
gettext('Displaying the contents of an 16x8 rom memory in the LEDs');
gettext('07. ROM 16x8 file');
gettext('Displaying the contents of an 16x8 rom memory in the LEDs  \nThe memory is read from the rom0.list file');
gettext('08. ROM 16x8 file generic');
gettext('Displaying the contents of an 16x8 rom memory in the LEDs\nThe memory is read from the rom0.list file');
gettext('09. ROM 16x8 table');
gettext('Displaying the contents of an 16x8 rom memory in the LEDs  \nThe memory is read from the given table');
